name: poetry-publish
on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  publish-test-pypi:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 - --version 1.4.0
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Install Dependencies
        run: |
          poetry install
          poetry run sh setup.sh
          poetry run pip install -r requirements-dev.txt
      - name: Build package
        run: |
          export TARTVERSION=`poetry version | awk 'END {print $NF}'`
          poetry build
      - name: Publish package (dry run)
        run: poetry publish -r test-pypi --dry-run
      - name: Publish package
        run: poetry publish -r test-pypi

  publish-pypi:
    runs-on: ubuntu-latest
    needs: publish-test-pypi
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 - --version 1.4.0
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('pyproject.toml') }}
      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
      - name: Install Dependencies
        run: |
          poetry install
          poetry run sh setup.sh
          poetry run pip install -r requirements-dev.txt
      - name: Build package under tart name
        run: |
          export TARTVERSION=`poetry version | awk 'END {print $NF}'`
          poetry build
      - name: Publish package (dry run)
        run: poetry publish --dry-run
      - name: Publish package
        run: poetry publish